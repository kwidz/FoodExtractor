package org.liara.recipeoptimizer.machinelearning;
/*
The purpose of this program is to help the web crawler to find the good type of each component
 */

import org.checkerframework.checker.nullness.qual.NonNull;
import org.liara.recipeoptimizer.data.Ingredient;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
Read a file generated by the web crawler and finds all non typed components
there are 3 files, Vegetables and raw materials, meat fish cheese, modifier
The file modifier contains all modifiers for meat cheese fish, like grated or chopped
 */
public class IngredientReader {

    private List<String> meatFishCheeseList;
    private List<String> modifiers;
    private List<String> vegetables;
    private List<String> forbidenTypes;


    public IngredientReader(String meatFishCheese, String modifiers, String vegetables, String forbiden){
        this.meatFishCheeseList=makeList(meatFishCheese);
        this.modifiers=makeList(modifiers);
        this.vegetables=makeList(vegetables);
        this.forbidenTypes=makeList(forbiden);
    }

    public void refreshTypes(String meatFishCheese, String modifiers, String vegetables, String forbiden){
        this.meatFishCheeseList=makeList(meatFishCheese);
        this.modifiers=makeList(modifiers);
        this.vegetables=makeList(vegetables);
        this.forbidenTypes=makeList(forbiden);
    }

    private List<String> makeList(String fileName){
        Stream<String> stream = null;
        List<String> list = null;
        try {
            stream = Files.lines(Paths.get(fileName));
        } catch (IOException e) {
            e.printStackTrace();
        }

        list = stream.map(String::toUpperCase)
                .collect(Collectors.toList());

        return list;
    }

    public @NonNull String classify(@NonNull final Ingredient i){
        String text=i.getName();
        return classify(text);

    }

    public String classify(String text){

        if (SearchInDictionary(text, forbidenTypes)!="")
            return "Forbiden";
        String type = SearchInDictionary(text, meatFishCheeseList);
        if (type !="") {
            String modif = SearchInDictionary(text, modifiers);
            if (modif !="")
                return type+" ("+modif+")";
            return type;

        }

        type = SearchInDictionary(text, this.vegetables);

        if (type !="") {
            String modif = SearchInDictionary(text, modifiers);
            if (modif !="")
                return type+" ("+modif+")";
            return type;

        }

        return "unclassified";

    }


    private String SearchInDictionary(String text, List<String> myTypes) {
         for (String s: myTypes
             ) {
            if (text.toUpperCase().contains(s.toUpperCase()))
                return s;
            if (text.toUpperCase().contains(s.toUpperCase()+"S"))
                return s;
        }
        return "";
    }

    public static void main(String[] args){
        IngredientReader r = new IngredientReader("/home/kwidz/Cours/Memoire Maitrise/ExtracteurIngrédients/src/MachineLearning/Meat.txt","/home/kwidz/Cours/Memoire Maitrise/ExtracteurIngrédients/src/MachineLearning/Modifiers.txt", "/home/kwidz/Cours/Memoire Maitrise/ExtracteurIngrédients/src/MachineLearning/Vegetables.txt", "/home/kwidz/Cours/Memoire Maitrise/ExtracteurIngrédients/src/MachineLearning/Forbiden.txt");
    }

}
